<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCannon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "ready";
time = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state) {
    case "ready":
        if place_meeting(x, y, objPlayer) {
            state = "wait 1";
            time = 0;
            objPlayer.frozen = true;
        }
        break;
    case "wait 1":
        time += 1;
        if time &gt;= 25 {
            with(objPlayer) {
                var d = instance_create(x, y, objTowerDummy);
                d.xScale = xScale;
                d.depth = depth;
                instance_destroy();
                audio_play_sound(sndJump, 0, false);
            }
            state = "load";
            time = 0;
        }
        break;
    case "load":
        time += 1;
        var duration = 35;
        var f = time / duration;
        objTowerDummy.x = lerp(objTowerDummy.xstart, x, f);
        var yy = bbox_top - 32;
        var jump_peak = 0.7;
        if f &lt; jump_peak {
            var g = 1/jump_peak * f;
            objTowerDummy.y = lerp(objTowerDummy.ystart, yy, 1 - power(1 - g, 2));
        }
        else {
            objTowerDummy.depth = depth + 1;
            var g = 1/(1-jump_peak) * (f - jump_peak);
            objTowerDummy.y = lerp(yy, bbox_top, g * g);
        }
        if time &gt;= duration {
            state = "charge";
            instance_destroy(objTowerDummy);
            time = 0;
        }
        break;
    case "charge":
        time += 1;
        var duration = 15;
        var f = time / duration;
        if time &lt;= duration {
            var f_out = 1 - power(1 - f, 2);
            image_xscale = lerp(1, 1.25, f_out);
            image_yscale = lerp(1, 0.5, f_out);
        }
        if time &gt;= 30 {
            state = "fire";
            time = 0;
        }
        break;
    case "fire":
        time += 1;
        var duration = 2;
        var f = time / duration;
        image_xscale = lerp(1.25, 1, f);
        image_yscale = lerp(0.5, 1, f);
        if time &gt;= duration {
            with(instance_create(x, bbox_top, objTowerDummy2)) {
                vspeed = -16;
                depth = other.depth + 1;
            }
            state = "wait 2";
        }
        break;
    case "wait 2":
        time += 1;
        if time == 25 {
            instance_create(0, 0, objTowerFadeout);
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
