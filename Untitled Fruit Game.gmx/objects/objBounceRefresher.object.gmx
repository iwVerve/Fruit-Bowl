<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBounceRefresher</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.2;

wobble_magnitude = 1.4;
wobble_period = random_range(75, 100);
time = random(wobble_period);

cooldown = 0;
cooldown_duration = 10;

dip = 0;
dip_vspeed = 0;
dip_start_vspeed = 2.5;
dip_gravity = 0.4;
dip_vspeed_min = 0.8;

spikes = noone;

x_prev = x;
y_prev = y;
      
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(spikes) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spikes = instance_create(x, y, objBounceSpikes);
spikes.image_angle = image_angle;
spikes.image_xscale = image_xscale;
spikes.image_yscale = image_yscale;
spikes.depth = depth + 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(spikes) {
    spikes.x = x;
    spikes.y = y;
    spikes.image_angle = image_angle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var down_x = lengthdir_x(1, 270 + image_angle);
var down_y = lengthdir_y(1, 270 + image_angle);


if cooldown &lt;= 0 {
    var player = instance_place(x, y, objPlayer);
    if player != noone {
        var b = false;
        with(player) {
            if !place_meeting(x - 10 * down_x, y - 10 * down_y, other) || (down_x * hspeed + down_y * vspeed) &gt; 4 {
                b = true;
            }
        }
        
        if b {
            if down_x != 0 {
                player.hmomentum = -8.5 * down_x;
            }
            if down_y != 0 {
                var v = -8.5 * down_y;
                var f = (1 - abs(down_y));
                player.vspeed = v + min(player.vspeed - v, 0) * f;
            }
            cooldown = cooldown_duration;
            dip_vspeed = dip_start_vspeed;
            alarm[0] = 5;
            
            var count = 7;
            var array = get_fair_rng(-12, 12, count, 0.8);
            for(var i = 0; i &lt; count; i += 1) {
                with(instance_create(x, y, objBounceBounceParticle)) {
                    var d = array[i];
                    x += lengthdir_x(other.image_xscale * d, other.image_angle);
                    y += lengthdir_y(other.image_xscale * d, other.image_angle);
                    direction = other.image_angle + 90;
                }
            } 
            
            var snd = audio_play_sound(sndBounceBoing, 0, false);
            audio_sound_pitch(snd, random_range(0.8, 1.2));
            
            if room == rJigsaw {
                if player.airJumps = 0 {
                    player.airJumps = 1;
                }
            }
        }
        else {
            player.airJumps = 1;
            
            repeat(5) {
                var inst = instance_create(x, y, objBouncePickupParticle);
                inst.image_xscale = image_xscale;
                inst.image_yscale = image_yscale;
                inst.hspeed *= image_xscale;
                inst.vspeed *= image_yscale;
            }
            
            var snd = audio_play_sound(sndBouncePickup, 0, false);
            audio_sound_pitch(snd, random_range(0.8, 1.2));
            
            instance_destroy();
        }
    }
}
else {
    cooldown -= 1;
}


dip += dip_vspeed;
dip_vspeed -= dip_gravity;
dip_vspeed = max(dip_vspeed, -dip_vspeed_min);
dip = max(dip, 0);

if path_index != -1 {
    hspeed = x - x_prev;
    vspeed = y - y_prev;
}
xstart += hspeed;
ystart += vspeed;

var wobble = wobble_magnitude * dsin(360 * time / wobble_period) + dip;
x = xstart + down_x * wobble;
y = ystart + down_y * wobble;

if instance_exists(spikes) {
    spikes.x = x + hspeed;
    spikes.y = y + vspeed;
}

time += 1;
x_prev = x;
y_prev = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
