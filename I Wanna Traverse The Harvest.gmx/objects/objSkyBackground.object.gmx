<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>30000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>color_top = make_color_hsv(140, 90, 100);
color_bottom = make_color_hsv(170, 90, 70);

y_top = 0;
y_bottom = 608;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_set_projection_ortho(0, 0, 800, 608, 0);
    draw_rectangle_color(0, y_top, room_width, y_bottom, color_top, color_top, color_bottom, color_bottom, false);
    
    draw_set_alpha(0.75);
        for(var xx = 0; xx &lt; 800; xx += 400) {
            for(var yy = 0; yy &lt; 608; yy += 304) {
                draw_sprite(sprStars, 0, xx, yy);
            }
        }
    draw_set_alpha(1);
    
    draw_set_alpha(2/255);
        draw_set_blend_mode(bm_add);
            for(var xx = 0; xx &lt; 800; xx += 128) {
                for(var yy = 0; yy &lt; 608; yy += 128) {
                    draw_sprite(sprNoise, 0, xx, yy);
                }
            }
        draw_set_blend_mode(bm_normal);
    draw_set_alpha(1);
d3d_set_projection_ortho(view_xview, view_yview, view_wview, view_hview, view_angle);  

if room == rTower {
    var y_start = 32 * floor((view_yview - 80) / 32) + 80;
    for(var yy = max(y_start, 80); yy &lt; y_start + 640; yy += 160) {
        for(var xx = 144; xx &lt;= 624; xx += 32) {
            draw_background(bTower, xx, yy);
        }
    }
    
    var b = c_black;
    var w = make_color_hsv(0, 0, 0.1 * 255);
    draw_set_blend_mode(bm_subtract);
        draw_rectangle_colour(144, max(view_yview, 80), 399, view_yview + 608, w, b, b, w, false);
        draw_rectangle_colour(656, max(view_yview, 80), 400, view_yview + 608, b, w, w, b, false);
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
