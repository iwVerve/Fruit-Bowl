<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPauseEye</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !savedata_get("sealNegative") {
    instance_destroy();
    exit;
}

arrow_alpha = 0;

off_x = 0;
off_y = 0;

time = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(objPlayer) {
    var dist = point_distance(x + 16, y + 16, objPlayer.x, objPlayer.y);
    dist = clamp(dist / 256, 0, 1);
    var dir = point_direction(x + 16, y + 16, objPlayer.x, objPlayer.y);
    off_x = lengthdir_x(3 * dist, dir);
    off_y = lengthdir_y(1 * dist, dir);
}

if place_meeting(x, y, objPlayer) {
    arrow_alpha += 1/20;
    if input_check_pressed(KEY.UP) {
        event_user(0);
    }
}
else {
    arrow_alpha -= 1/20;
}

arrow_alpha = clamp(arrow_alpha, 0, 1);
time += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.gamePaused = true;
global.pauseDelay = global.pauseDelayLength;

with(objPlayer)
{
    if (!place_free(x, y + gravity))
    {
        y -= gravity;
    }
}

global.pause_seal = noone;

instance_deactivate_all(false);
instance_activate_object(objPlayMusic); //If objPlayMusic sets the current music, we need to find it if we turn on music in the pause options.
instance_activate_object(objWorld);

global.pauseSurf = surface_create(surface_get_width(application_surface), surface_get_height(application_surface));
surface_copy(global.pauseSurf, 0, 0, application_surface);

//Fix transparent objects appearing dark when paused
surface_set_target(global.pauseSurf);
    draw_set_blend_mode(bm_add);
    draw_set_color(c_black);
    draw_rectangle(0, 0, surface_get_width(global.pauseSurf), surface_get_height(global.pauseSurf), false);
    draw_set_blend_mode(bm_normal);
surface_reset_target();

var inst = instance_create(0, 0, objKeyboardControlsMenu);
inst.select = KEY.PAUSE;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var yy = y + 1.4 * dsin(time * 360/100);

draw_sprite(sprite_index, 0, x, yy);
draw_sprite(sprite_index, 1, x + off_x, yy + off_y);

draw_set_alpha(arrow_alpha);
    draw_sprite(sprDoorArrow, 0, x + 16, y - 8 + 2 * dsin(time * 360 / 160));
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
