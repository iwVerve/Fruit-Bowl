<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make sure only 1 objWorld exists
//All other code you'd want to put here should go in the Game Start event for consistency.

if (instance_number(object_index) &gt; 1)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Reset global.playerStartTarget

global.playerStartTarget = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to previous window position/size (after using display_reset)

if (!window_get_fullscreen())
{
    window_set_position(global.windowXPrev, global.windowYPrev);
    window_set_size(global.windowWidthPrev, global.windowHeightPrev);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause current music after fadeout ends

audio_pause_sound(global.currentMusic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game checks - Pause, restart

input_check_and_switch_controller();

if (global.gameStarted)
{
    check_and_pause();
    pause_t += 1;
    
    if (!global.gamePaused)
    {
        canvas_update();
    
        if (input_check_pressed(KEY.RESTART))
        {
            //Stop death sound/music
            audio_stop_sound(global.deathSound);
            audio_stop_sound(global.gameOverMusic);
            
            //Resume room music
            audio_resume_sound(global.currentMusic);
            
            //Return to old gain if music is being faded out
            if (global.musicFading)
            {
                global.musicFading = false;
                audio_sound_gain(global.currentMusic, global.currentGain,0);
                alarm[0] = -1;   //Reset alarm that pauses music
            }
            
            savedata_save(false);    //Save death/time
            savedata_load(false);    //Load the game
        }
        
        if ( (global.timeWhenDead || instance_exists(objPlayer)) &amp;&amp; !(!global.timeWhenCleared &amp;&amp; savedata_get("gameClear")) )    //Increment timer
        {
            var timeMicro = savedata_get("timeMicro") + delta_time;
            var time = savedata_get("time") + timeMicro div 1000000;
            timeMicro = timeMicro mod 1000000;
            
            savedata_set_persistent("time", time);
            savedata_set_persistent("timeMicro", timeMicro);
        }
    }
    else    //Volume control
    {
        var inPauseOptions = instance_exists(objOptionsMenu) || instance_exists(objKeyboardControlsMenu) || instance_exists(objControllerMenu);

        if (!inPauseOptions)
        {        
            var vPressed = (input_check_pressed(KEY.UP) - input_check_pressed(KEY.DOWN));                
            var v = (input_check(KEY.UP) - input_check(KEY.DOWN));
            
            if (vPressed != 0)
            {
                global.volumeLevel += vPressed;
                volumeTimer = volumeDelay;
            }
            if (v != 0)
            {
                if (volumeTimer &lt;= 0)
                {
                    global.volumeLevel += v;
                }
                volumeTimer--;
            }
            
            global.volumeLevel = clamp(global.volumeLevel, 0, 100);
            audio_master_gain(global.volumeLevel / 100);
            
            if (input_check_pressed(KEY.MENU_OPTIONS))
            {
                instance_create(0, 0, objOptionsMenu);
            }
        }
    }
    
    set_room_caption();
}
else if (room == rDifficultySelect)    //Special case for restarting in difficulty select
{
    if (input_check_pressed(KEY.RESTART))
    {
        //Stop death sound/music
        audio_stop_sound(global.deathSound);
        audio_stop_sound(global.gameOverMusic);
        
        //Resume room music
        audio_resume_sound(global.currentMusic);
        
        //Return to old gain if music is being faded out
        if (global.musicFading)
        {
            global.musicFading = false;
            audio_sound_gain(global.currentMusic, global.currentGain,0);
            alarm[0] = -1;   //Reset alarm that pauses music
        }
    
        instance_destroy(objPlayer);
        room_restart();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug + update keys

if (global.debugMode &amp;&amp; global.gameStarted &amp;&amp; !global.gamePaused)
{
    if (keyboard_check(vk_tab))    //Teleport to mouse
    {
        with (objPlayer)
        {
            if (place_free(mouse_x, mouse_y))
            {
                x = mouse_x;
                y = mouse_y - vspeed;
            }
        }
    }
    
    if (keyboard_check_pressed(vk_backspace))    //Toggle debug overlay
    {
        //global.debugOverlay = !global.debugOverlay;
    }
    
    if (keyboard_check_pressed(vk_insert))    //Save game
    {
        with (objPlayer)
        {
            savedata_save(true);
            var snd = audio_play_sound(sndItem, 0, false);
            audio_sound_gain(snd, 0.5, 0);
        }
    }
    
    if (keyboard_check_pressed(vk_delete))    //Toggle showing the hitbox
    {
        global.debugShowHitbox = !global.debugShowHitbox;
    }
    
    if (keyboard_check_pressed(vk_home))    //Toggle god mode
    {
        global.debugNoDeath = !global.debugNoDeath;
    }
    
    if (keyboard_check_pressed(vk_end))    //Toggle infinite jump
    {
        global.debugInfJump = !global.debugInfJump;
    }
    
    if (keyboard_check_pressed(vk_pageup) &amp;&amp; room != room_last)    //Go to next room
    {        
        global.noPause = false;
        instance_destroy(objPlayer);
        room_goto_next();
    }
    
    if (keyboard_check_pressed(vk_pagedown) &amp;&amp; room != room_first)    //Go to previous room
    {
        global.noPause = false;
        instance_destroy(objPlayer);
        room_goto_previous();
    }
    
    if keyboard_check_pressed(ord("I")) {
        with(objPlayer) {
            visible = !visible;
        }
        with(objBossEagle) {
            visible = false;
        }
        with(objBossHealthbar) {
            visible = false;
        }
    }
     
    if keyboard_check_pressed(ord("O")) {
        var num = floor(get_integer("", ""));
        view_yview = num;
        instance_destroy(objCamera)
    }
     
    if keyboard_check_pressed(ord("U")) {
        with(objSkyBackground) {
            switch(room) {
                case rTower:
                    var n = get_integer("", "");
                    y_top = n;
                    y_bottom = n + 2432;
                    break;
                
                case rClimb3:
                    y_top = 0;
                    y_bottom = 2432;
                    break;
                    
                case rClimb2:
                    y_top = -608;
                    y_bottom = 1824;
                    break;
                    
                case rClimb1:
                case rOutsideAbove:
                    y_top = -1216;
                    y_bottom = 1216;
                    break;
                    
                case rOutsideRight:
                case rOutside:
                    y_top = -1824;
                    y_bottom = 608;
                    break;
            }
        }
    }
}

if (global.debugVisuals)
{
    with (objPlayer)    //Player debug visuals
    {
        if (global.debugNoDeath)    //God mode -&gt; transparent player
            { image_alpha = 0.7; }
        else
            { image_alpha = 1; }
        
        if (global.debugInfJump)    //Inf jump -&gt; blue player
            { image_blend = c_blue; }
        else
            { image_blend = c_white; }
    }
}

if (!global.isUpToDate &amp;&amp; !global.gameStarted)
{
    if (keyboard_check_pressed(vk_tab))
    {
        url_open(global.newestVersionLink);
    }
}

if keyboard_check_pressed(vk_f8) {
    //instance_create(0, 0, objMintEditor);
}

//if keyboard_check_pressed(vk_backspace) {
if input_check_pressed(KEY.HUB) {
    if global.gameStarted &amp;&amp; savedata_get("gameClear") &amp;&amp; room != rNegative1 &amp;&amp; room != rNegative2 &amp;&amp; room != rNegative3 &amp;&amp; !global.gamePaused {
        if room != rClear {
            savedata_set("warp_count", savedata_get("warp_count") + 1);
        }
        global.jump_out_of_bowl = false;
        instance_destroy(objPlayer);
        global.playerStartTarget = 1;
        if savedata_get("warp_count") &gt; 5 {
            global.playerStartTarget = 2;
        }
        if savedata_get("warp_count") &gt; 10 {
            global.playerStartTarget = 3;
        }
        room_goto(rClear);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Function keys

if (keyboard_check_pressed(vk_escape))
{
    game_end();
}

if (keyboard_check_pressed(vk_f2))
{
    restart_game();
    exit;
}

if (keyboard_check_pressed(vk_f4) &amp;&amp; !global.gamePaused) //Toggle fullscreen mode
{
    global.fullscreenMode = !global.fullscreenMode;
    window_set_fullscreen(global.fullscreenMode);
    config_save();
}

if (keyboard_check_pressed(vk_f5) &amp;&amp; !global.gamePaused) //Reset window size
{
    reset_window_size();
}

if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("M")) &amp;&amp; !global.gamePaused) //Toggle mute music setting
{
    music_toggle();
    config_save();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var Id = async_load[? "id"];
var status = async_load[? "status"];
var result = async_load[? "result"];

if (Id == global.httpUpdateCheck)
{                 
    if (status == 0)
    {                        
        var map = json_decode(result);
        if (map != -1)
        {
            global.newestVersionNumber = map[? "game-version"];
            global.newestVersionLink = map[? "download-link"];
            if (!is_undefined(global.newestVersionNumber) &amp;&amp; !is_undefined(global.newestVersionLink))
            {
                global.isUpToDate = (global.gameVersion == global.newestVersionNumber);
                updateString = string_concat("Current version ", global.gameVersion, " is outdated! Version ", global.newestVersionNumber, " is available.#Press Tab to open the download link");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade current music out
global.musicFading = true;
global.currentGain = audio_sound_get_gain(global.currentMusic);
audio_sound_gain(global.currentMusic, 0, 1000);    //Fade out music over 1 second

alarm[0] = 50;  //Pause music when it's done fading
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_particles_clear(global.glitch_particle_system);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set music, framerate, and window caption

if (!instance_exists(objPlayMusic))
{
    music_play_room_bgm();
}

room_speed = 50;
set_room_caption();
alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var map = global.musicMap;
var key = ds_map_find_first(map);

repeat(ds_map_size(map)) {
    var index = map[? key];
    audio_destroy_stream(index);
    key = ds_map_find_next(map, key);
}

canvas_deinit();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize everything

initialize_globals();
config_load();

if (global.checkForUpdates)
{
    global.httpUpdateCheck = http_get(global.versionDataUrl);
    updateString = "";
}

volumeTimer = 0;
volumeDelay = 10;

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Canvas
canvas_draw();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Smoothing mode fix
//Draw the final application surface at the desired smoothing.
texture_set_interpolation(global.smoothingMode);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Smoothing mode fix
//Turn off smoothing so stretched sprites don't distort.
texture_set_interpolation(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw update + debug overlay

draw_set_color(c_black);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(fHeyComicSmall);

if (!global.gameStarted)
{
    if (!global.isUpToDate)
    {
        draw_text_outline(34, 34, updateString, c_white, c_black);
    }
}
else if (global.debugOverlay)
{
    var drawX = 0, drawY = 0, drawAlign = 0;
    if (instance_exists(objPlayer))
    {
        drawX = objPlayer.x;
        drawY = objPlayer.y;
        drawAlign = objPlayer.x mod 3;
    }
    
    draw_text_outline(20, 20, "X: "+string(drawX), c_black, c_white);
    draw_text_outline(20, 40, "Y: "+string(drawY), c_black, c_white);
    draw_text_outline(20, 60, "Align: "+string(drawAlign), c_black, c_white);
    draw_text_outline(20, 80, "Room name: "+room_get_name(room), c_black, c_white);
    draw_text_outline(20, 100, "Room number: "+string(room), c_black, c_white);
    draw_text_outline(20, 120, "God mode: "+string(global.debugNoDeath), c_black, c_white);
    draw_text_outline(20, 140, "Infinite jump: "+string(global.debugInfJump), c_black, c_white);
    draw_text_outline(20, 160, "FPS: "+string(fps), c_black, c_white);
    draw_text_outline(20, 180, "Real FPS: "+string(fps_real), c_black, c_white);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw pause screen

if (global.gamePaused)
{
    draw_clear(c_black);
    
    if (surface_exists(global.pauseSurf))       //Check if surface exists before drawing it
    {
        draw_surface(global.pauseSurf,0,0);
    }
    
    if global.pause_seal != noone {
        instance_activate_object(objSeal);
        with(global.pause_seal) {
            event_user(0);
        }
        instance_deactivate_object(objSeal);
    }
    
    draw_set_color(c_black);
    draw_set_alpha(0.5);
    
    draw_rectangle(-1, -1, display_get_gui_width(), display_get_gui_height(), 0);    //Darken the paused screen
    
    draw_set_alpha(1);
    
    var inPauseOptions = instance_exists(objOptionsMenu) || instance_exists(objKeyboardControlsMenu) || instance_exists(objControllerMenu);
    
    if (!inPauseOptions)
    {
        draw_set_color(c_white);
        draw_set_halign(fa_center);
        draw_set_valign(fa_top);
        draw_set_font(fLightBeachHuge);
        
        draw_text_outline(display_get_gui_width()/2, display_get_gui_height()/2 - 24, "PAUSE", c_white, c_black);
        
        draw_set_halign(fa_left);
        draw_set_font(fHeyComicNormal);
        
        var t = savedata_get("time");
        var timeText = string(t div 3600) + ":";
        t = t mod 3600;
        timeText += string(t div 600);
        t = t mod 600;
        timeText += string(t div 60) + ":";
        t = t mod 60;
        timeText += string(t div 10);
        t = t mod 10;
        timeText += string(floor(t));
        
        draw_text_outline(20, 516, "Volume: " + string(global.volumeLevel) + "%", c_white, c_black);
        draw_text_outline(20, 541, "Deaths: " + string(savedata_get("death")), c_white, c_black);
        draw_text_outline(20, 566, "Time: " + timeText, c_white, c_black);
        
        draw_set_font(fHeyComicSmall);
        draw_set_halign(fa_middle);
        if (!global.controllerMode)
        {
            var optionsButton = input_get_key_name(global.menuOptionsButton[0]);
        }
        else
        {
            var optionsButton = input_get_button_name(global.menuOptionsButton[1]);
        }
        draw_text_outline(400, 556, "["+optionsButton+"] Options", c_white, c_black);
    }
    else
    {
        with(objOptionsMenu)
        {
            event_perform(ev_draw, 0);
        }
        with(objKeyboardControlsMenu)
        {
            event_perform(ev_draw, 0);
        }
        with(objControllerMenu)
        {
            event_perform(ev_draw, 0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
