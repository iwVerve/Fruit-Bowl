<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPresentFull</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !savedata_get("allSeals") {
    instance_destroy();
    exit;
}

image_speed = 0;

sprite_index = sprPresent;
x += sprite_get_xoffset(sprite_index);
y += sprite_get_yoffset(sprite_index);

cap = instance_create(x, y, objPresentCap);
arrow = instance_create(x, y - 16, objPresentArrow);
arrow.present = id;

state = 0;

wait_cooldown = 25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == 0 {
    if place_meeting(x, y, objPlayer) {
        if instance_exists(arrow) {
            arrow.alpha += 1/20;
        }
        if input_check_pressed(KEY.UP) {
            instance_destroy(arrow);
            var side = choose(-1, 1);
            cap.hspeed = side * random_range(0.5, 1);
            cap.rotate_speed = -side * random_range(1, 2);
            cap.vspeed = -5;
            cap.gravity = 0.2;
            audio_play_sound(sndBottlePop, 0, false);
            objPlayer.frozen = true;
            
            state = 1;
        }
    } else {
        if instance_exists(arrow) {
            arrow.alpha -= 1/20;
        }
    }
    
    if instance_exists(arrow) {
        arrow.alpha = clamp(arrow.alpha, 0, 1);
    }
} else if state == 1 {
    if wait_cooldown &gt; 0 {
        wait_cooldown -= 1;
    } else {
        state = 2;
    }
} else if state == 2 {
    if (instance_exists(objPlayer)) {
        var _player = instance_create(objPlayer.x, objPlayer.y, objPresentPlayer);
        _player.image_xscale = objPlayer.xScale;
        _player.target_x = x;
        _player.target_y = y + 48;
        instance_destroy(objPlayer);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
