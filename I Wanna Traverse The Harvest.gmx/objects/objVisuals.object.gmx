<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objects = array_from_values(
    objBlock,
    objPlayerKiller,
    objPlayer,
    objBounceRefresher,
    objBullet,
    objCeilingRefresher,
    objPlatformOrb,
    objSave,
    objShadowCast,
    objWatermelonTrigger,
    objCannon,
    objTowerDummy,
    objMap,
    objSecret2Stalk,
    objSecret2StalkTip,
    objWarp,
    objBillboard,
    objPlatform,
    objSecretDoor,
    objFork,
    objNegativeSign,
    objGlitchTexture,
    objBossBulletParent,
    objBossEagle,
    objPresent,
    objPresentCap,
);

x_dist = 3;
y_dist = 3;
alpha = 0.15;

shadow_surf = noone;

// Not vars so they can easily be accessed from a script
object = array_create(0);
sprite = array_create(0);
left_sprite = array_create(0);
right_sprite = array_create(0);

if room != rFops {
    with(objBlock) {
        if object_index != objSecret2Vines {
            sprite_index = sprBlockMaskOpaque;
        }
    }
}

with(objShadowCast) {
    sprite_index = sprBlockMaskOpaque;
}

with(objMiniBlock) {
    sprite_index = sprMiniBlockMaskOpaque;
}

with(objGlitchTexture) {
    sprite_index = sprBlockMaskOpaque;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

surface_free(shadow_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Visuals_get_room_visuals(room);
        
for (var i = 0; i &lt; array_length_1d(object); i += 1) {
    with(object[i]) {
        if room == rApple {
            if x &lt; 400 {
                sprite_index = other.left_sprite[i];
            }
            else {
                sprite_index = other.right_sprite[i];
            }
        }
        else {
            sprite_index = other.sprite[i];
        }
        
        depth = 1100;
    }
}

if room == rWatermelon {
    with(objTriggerManager) {
        with(inst) {
            switch(object_index) {
                case objSpikeUp:
                    sprite_index = sprWatermelonTriggerSpikeUp;
                    break;
                case objSpikeRight:
                    sprite_index = sprWatermelonTriggerSpikeRight;
                    break;
                case objSpikeDown:
                    sprite_index = sprWatermelonTriggerSpikeDown;
                    break;
                case objSpikeLeft:
                    sprite_index = sprWatermelonTriggerSpikeLeft;
                    break;
                case objMiniUp:
                    sprite_index = sprWatermelonTriggerMiniUp;
                    break;
                case objMiniRight:
                    sprite_index = sprWatermelonTriggerMiniRight;
                    break;
                case objMiniDown:
                    sprite_index = sprWatermelonTriggerMiniDown;
                    break;
                case objMiniLeft:
                    sprite_index = sprWatermelonTriggerMiniLeft;
                    break;
            }
        }
    }
}

if room == rJigsaw {
    with(objMiniUp) {
        image_speed = 0;
        if x % 32 != 0 {
            image_index = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(shadow_surf) {
    shadow_surf = surface_create(816, 624);
}

surface_set_target(shadow_surf);
    draw_clear_alpha(c_black, 0);
    
    d3d_set_projection_ortho(view_xview - 8, view_yview - 8, view_wview + 16, view_hview + 16, view_angle);
        draw_set_color_write_enable(0, 0, 0, 1);
            for(var i = 0; i &lt; array_length_1d(objects); i += 1) {
                var object = objects[i];
                
                switch(object) {
                    case objPlayer:
                    case objWatermelonTrigger:
                    case objMap:
                        with(object) {
                            if visible {
                                event_perform(ev_draw, 0);
                            }
                        }
                        break;
                        
                    case objBlock:
                        if room != rTower {
                            with(object) {
                                if object_index != objBlockNoShadow {
                                    draw_self();
                                }
                            }
                        }
                        else {
                            with(objTileLayerShadowBottom) {
                                draw_surface(surf, view_xview - 8, view_yview - 8);
                            }
                        }
                        break;
                    
                    case objPlatform:
                        with(object) {
                            if visible {
                                draw_self();
                            }
                        }
                        break;
                        
                    default:
                        with(object) {
                            draw_self();
                        }
                        break;
                }
            }
        draw_set_color_write_enable(1, 1, 1, 1);
    d3d_set_projection_ortho(view_xview, view_yview, view_wview, view_hview, view_angle);
surface_reset_target();

draw_surface_ext(shadow_surf, view_xview + x_dist - 8, view_yview + y_dist - 8, 1, 1, 0, c_white, alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
