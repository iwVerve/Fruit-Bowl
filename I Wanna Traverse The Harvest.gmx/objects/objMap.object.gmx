<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>images = array_from_values(
    array_from_values(-1, -1,  0, 26, 27, 28),
    array_from_values(-1, 18,  1, -1, -1, -1),
    array_from_values(-1, -1,  2,  3, 17, 24),
    array_from_values( 8,  6,  5,  4, 16, 23),
    array_from_values( 9,  7, 25, 19, 15, 21),
    array_from_values(10, 11, 12, 13, 14, 20),
);
rooms = array_from_values(
    array_from_values(-1,             -1,          rFall,          rFops,         rJigsaw, rO1),
    array_from_values(-1,             rSecret1,    rTutorial,      -1,            -1,      -1),
    array_from_values(-1,             -1,          rBanana,        rCherry,       rTower,  rClimb3),
    array_from_values(rCoconut,       rApple,      rIntermission1, rGrape,        rTower,  rClimb2),
    array_from_values(rIntermission2, rKiwi,       rSecret3,       rOutsideAbove, rTower,  rClimb1),
    array_from_values(rBlackberry,    rStrawberry, rWatermelon,    rOutside,      rTower,  rOutsideRight),
);
start = array_from_values(
    array_from_values(-1, -1, -1, -1, -1, -1),
    array_from_values(-1, -1, -1, -1, -1, -1),
    array_from_values(-1, -1, -1, -1, 3,  -1),
    array_from_values(-1, -1, -1, -1, 2,  -1),
    array_from_values(-1, -1, -1, -1, 1,  -1),
    array_from_values(-1, -1, -1, -1, -1, -1),
);
extra_rooms = array_from_values(
    array_from_values(7, 2, 29, rGlitch1, savedata_get("seenGlitch1")),
    array_from_values(7, 3, 30, rGlitch2, savedata_get("seenGlitch2")),
    array_from_values(8, 3, 31, rGlitch3, savedata_get("seenGlitch3")),
    array_from_values(8, 4, 32, rGlitch4, savedata_get("seenGlitch4")),
    array_from_values(8, 5, 33, rGlitch5, savedata_get("seenBoss1")),
    array_from_values(9, 5, 34, rBoss1,   savedata_get("seenBoss1")),
    array_from_values(9, 4, 35, rBoss2,   savedata_get("seenBoss2")),
    array_from_values(9, 3, 36, rBoss3,   savedata_get("seenBoss3")),
);

scale = 0.3125;
var spr = sprRoomThumbnail;
var width = scale * sprite_get_width(spr);
var height = scale * sprite_get_height(spr);
emitters = array_create(0);
emitter_count = 0;
for(var i = 0; i &lt; array_height_2d(extra_rooms); i += 1) {
    if !extra_rooms[i, 4] {
        continue;
    }
    var xx = extra_rooms[i, 0];
    var yy = extra_rooms[i, 1];
    var l = true, r = true, t = true, b = true;
    for(var j = 0; j &lt; array_height_2d(extra_rooms); j += 1) {
        if !extra_rooms[j, 4] {
            continue;
        }
        if (extra_rooms[j, 0] == xx - 1 &amp;&amp; extra_rooms[j, 1] == yy) l = false;
        if (extra_rooms[j, 0] == xx + 1 &amp;&amp; extra_rooms[j, 1] == yy) r = false;
        if (extra_rooms[j, 1] == yy - 1 &amp;&amp; extra_rooms[j, 0] == xx) t = false;
        if (extra_rooms[j, 1] == yy + 1 &amp;&amp; extra_rooms[j, 0] == xx) b = false;
    }
    var psys = global.glitch_particle_system;
    var ptyp = global.glitch_particle_type;
    var emit;
    var el = x + width * extra_rooms[i, 0];
    var er = x + width * (extra_rooms[i, 0] + 1) - 1;
    var et = y + height * extra_rooms[i, 1];
    var eb = y + height * (extra_rooms[i, 1] + 1) - 1;
    if l {
        emit = part_emitter_create(psys);
        part_emitter_region(psys, emit, el, el, et, eb, ps_shape_line, ps_distr_linear);
        part_emitter_stream(psys, emit, ptyp, -6);
        emitters[emitter_count] = emit;
        emitter_count += 1;
    }
    if r {
        emit = part_emitter_create(psys);
        part_emitter_region(psys, emit, er, er, et, eb, ps_shape_line, ps_distr_linear);
        part_emitter_stream(psys, emit, ptyp, -6);
        emitters[emitter_count] = emit;
        emitter_count += 1;
    }
    if t {
        emit = part_emitter_create(psys);
        part_emitter_region(psys, emit, el, er, et, et, ps_shape_line, ps_distr_linear);
        part_emitter_stream(psys, emit, ptyp, -4);
        emitters[emitter_count] = emit;
        emitter_count += 1;
    }
    if b {
        emit = part_emitter_create(psys);
        part_emitter_region(psys, emit, el, er, eb, eb, ps_shape_line, ps_distr_linear);
        part_emitter_stream(psys, emit, ptyp, -4);
        emitters[emitter_count] = emit;
        emitter_count += 1;
    }
}

hover_x = -1;
hover_y = -1;
hover_room = -1;
extra_hover_room = -1;
no_room_index = sprite_get_number(sprRoomThumbnail) - 1;

total_width = array_length_2d(images, 0) * sprite_get_width(sprRoomThumbnail) * scale;
total_height = array_height_2d(images) * sprite_get_height(sprRoomThumbnail) * scale;
border_width = 651;
border_height = 424;

if !savedata_get("seenTowerRight") {
    images[5, 5] = 22;
    rooms[5, 5] = -1;
}
if !savedata_get("seenClimb1") {
    images[4, 5] = -1;
    rooms[4, 5] = -1;
}
if !savedata_get("seenClimb2") {
    images[3, 5] = -1;
    rooms[3, 5] = -1;
}
if !savedata_get("seenClimb3") {
    images[2, 5] = -1;
    rooms[2, 5] = -1;
}
if !savedata_get("seenSecret1") {
    images[1, 1] = -1;
    rooms[1, 1] = -1;
}
if !savedata_get("seenSecret2A") {
    images[4, 3] = -1;
    rooms[4, 3] = -1;
}
if !savedata_get("seenSecret3") {
    images[4, 2] = -1;
    rooms[4, 2] = -1;
}
if !savedata_get("seenFops") {
    images[0, 3] = -1;
    rooms[0, 3] = -1;
}
if !savedata_get("seenJigsaw") {
    images[0, 4] = -1;
    rooms[0, 4] = -1;
}
if !savedata_get("seenO") {
    images[0, 5] = -1;
    rooms[0, 5] = -1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var spr = sprRoomThumbnail;
var width = scale * sprite_get_width(spr);
var height = scale * sprite_get_height(spr);    

hover_x = floor((mouse_x - x) / width);
hover_y = floor((mouse_y - y) / height);
    
if hover_x &gt;= 0 &amp;&amp; hover_x &lt; array_length_2d(rooms, 0) &amp;&amp; hover_y &gt;= 0 &amp;&amp; hover_y &lt; array_height_2d(rooms) {
    hover_room = rooms[hover_y, hover_x];
}
else {
    hover_room = -1;
}

extra_hover_room = noone;
for(var i = 0; i &lt; array_height_2d(extra_rooms); i += 1) {
    if !extra_rooms[i, 4] {
        continue;
    }
    var x_pos = extra_rooms[i, 0];
    var y_pos = extra_rooms[i, 1];
    var thumbnail_left = x + width * x_pos;
    var thumbnail_top = y + height * y_pos;
    var thumbnail_right = thumbnail_left + width - 1;
    var thumbnail_bottom = thumbnail_top + height - 1;
    if in_range(mouse_x, thumbnail_left, thumbnail_right) &amp;&amp; in_range(mouse_y, thumbnail_top, thumbnail_bottom) {
        extra_hover_room = i;
        break;
    }
}

if instance_exists(objPlayer) &amp;&amp; mouse_check_button_pressed(mb_left) {
    if hover_room != -1 {
        var target = start[hover_y, hover_x];
        if target != -1 {
            global.playerStartTarget = target;
        }
        instance_destroy(objPlayer);
        global.autosave = true;
        room_goto(hover_room);
    }
    else if extra_hover_room != noone {
        instance_destroy(objPlayer);
        global.autosave = true;
        room_goto(extra_rooms[extra_hover_room, 3]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

for(var i = 0; i &lt; emitter_count; i += 1) {
    part_emitter_destroy(global.glitch_particle_system, emitters[i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var spr = sprRoomThumbnail;
var width = scale * sprite_get_width(spr);
var height = scale * sprite_get_height(spr);
var small_rect = false;

texture_set_interpolation(true);
    for(var i = 0; i &lt; array_height_2d(images); i += 1) {
        for(var j = 0; j &lt; array_length_2d(images, i); j += 1) {
            var t_x = x + j * width;
            var t_y = y + i * height;
        
            var index = images[i, j];
            if index == -1 {
                index = no_room_index;
            }
            if index == 22 {
                draw_sprite_ext(spr, no_room_index, t_x, t_y, scale, scale, 0, c_white, 1);            
            }
            var is_secret_room = in_range(index, 26, 28);
            if !is_secret_room {
                draw_sprite_ext(spr, index, t_x, t_y, scale, scale, 0, c_white, 1);
            }
            else {
                var sw = sprite_get_width(spr);
                var sh = sprite_get_height(spr);
                var margin = 16;
                small_rect = true;
                var xx = t_x + scale * margin;
                var yy = t_y + scale * margin;
                draw_sprite_ext(spr, no_room_index, t_x, t_y, scale, scale, 0, c_white, 1);
                draw_sprite_part_ext(
                    spr, index,
                    margin, margin,
                    sw - 2 * margin, sh - 2 * margin,
                    xx, yy,
                    scale, scale, c_white, 1,
                );
                switch(index) {
                    case 26:
                        draw_set_color(c_red);
                        break;
                    case 27:
                        draw_set_color(c_blue);
                        break;
                    case 28:
                        draw_set_color(c_green);
                        break;
                }
                draw_rectangle(xx, yy, xx + width - 2 * scale * margin - 1, yy + height - 2 * scale * margin - 1, true);
            }
        }
    }
    for(var i = 0; i &lt; array_height_2d(extra_rooms); i += 1) {
        if !extra_rooms[i, 4] {
            continue;
        }
        var xx = x + width * extra_rooms[i, 0];
        var yy = y + height * extra_rooms[i, 1];
        var image = extra_rooms[i, 2];
        draw_sprite_ext(spr, image, xx, yy, scale, scale, 0, c_white, 1);
        if i == extra_hover_room {
            draw_set_color(c_white);
            draw_set_alpha(0.25);
                draw_rectangle(xx, yy, xx + width - 1, yy + height - 1, false);
            draw_set_alpha(1);
        }
    }
texture_set_interpolation(false);

if hover_room != -1 &amp;&amp; instance_exists(objPlayer) {
    var xx = x + width * hover_x;
    var yy = y + height * hover_y;
    var w = width - 1;
    var h = height - 1;
    if in_range(images[hover_y, hover_x], 26, 28) {
        xx += margin * scale;
        yy += margin * scale;
        w -= 2 * margin * scale;
        h -= 2 * margin * scale;
    }
    draw_set_color(c_white);
    draw_set_alpha(0.25);
        draw_rectangle(xx, yy, xx + w, yy + h, false);
    draw_set_alpha(1);
}

draw_sprite_ext(sprMapBorder, 0, x, y, total_width / border_width, total_height / border_height, 0, c_white, 1);
draw_sprite_ext(sprMapCursor, 0, x + 12, y + 8, 1, 1, 0, c_white, 0.6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
